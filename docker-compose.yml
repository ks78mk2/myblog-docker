version: "3"
services: 
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

  frontend:
    build:
      dockerfile: Dockerfile.dev
      context: ./my-blog
    container_name: my-blog
    #코드 수정후 다시이미지 build없이 코드가 반영 될 수 있게 volume을 사용한다.
    volumes:
      - ./my-blog:/app
      - /app/node_modules      
    stdin_open: true
    shm_size: '5gb'

  backend:
    build: 
      dockerfile: Dockerfile.dev
      context: ./my-blog-server
    container_name: my-blog-server
    ports:
      - 9090:9090
    volumes:
      - ./my-blog-server:/app
      - /app/node_modules      
    shm_size: '5gb'  

  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_DATABASE: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/data:/var/lib/mysql
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306
    shm_size: '5gb'
    #mysql의 root 비밀번호와 db를 설정해준다.
    