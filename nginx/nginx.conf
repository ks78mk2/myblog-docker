user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    
    upstream frontend {
        server frontend:8080;
    }
    #9090번 포트에서 backend가 돌아가는것을 명시
    upstream backend {
        server backend:9090;
    }
    
    server {
        listen 80;
        server_name www.ks78mk2.ga;

        # frontend redirect
        location / {
            return 301 https://www.ks78mk2.ga$request_uri;
        }        

        # backend
        location /api/v1 {
            proxy_pass http://backend/api/v1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    server {
        #nginx 포트를 80번으로 열어준다. 
        listen       443 ssl;
        server_name  www.ks78mk2.ga;

        ssl_certificate /etc/letsencrypt/live/www.ks78mk2.ga/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.ks78mk2.ga/privkey.pem;

        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        # include /etc/nginx/default.d/*.conf;

        
        # /로 시작하는 부분이 우선순위가 가장 낮다 
        # /로 들어오는 요청은 http://frontend로 보내준다
        # frontend라는 이름은 docker-compose에서 정의해줄 예정 
        location / {
            proxy_pass http://frontend;
        }

        location /sockjs-node {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }
        
        error_page   500 502 503 504  /50x.html;
    
        location /50x.html {
            root   /usr/share/nginx/html;
        }

    }
}